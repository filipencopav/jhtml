jhtml: simple html generator

* Usage example
  #+begin_src lisp
    (asdf:load-system :jhtml)

    (jhtml:jhtml 'doctype
                 `(html
                   (head (title "Hello")
                         (link :rel "stylesheet" :type "text/css" :href "link/to/css"))
                   (body (h1 "Hi!!")
                         (p "whadup?"))))
  #+end_src
  returns
  #+begin_src html
    <!DOCTYPE html><html><head><title>Hello</title><link REL="stylesheet" TYPE="text/css" HREF="link/to/css" /></head><body><h1>Hi!!</h1><p>whadup?</p></body></html>
  #+end_src
  It returns the html unformatted, it's intended for use in servers or
  something. Formatted, looks like:
  #+begin_src html
    <!DOCTYPE html>
    <html>
      <head>
        <title>Hello</title>
        <link REL="stylesheet" TYPE="text/css" HREF="link/to/css" />
      </head>
      <body>
        <h1>Hi!!</h1>
        <p>whadup?</p>
      </body>
    </html>
  #+end_src

* So what now?
  My guess is you're gonna use it to generate web pages. Start defining
  functions with this function underlying.
  #+begin_src lisp
    (defparameter *posts* ())

    (defun make-post (textcontent &key (username "Anonymous") (title ""))
      `(div :class "post"
            (span :class "title" ,title)
            (span :class "name" ,username)
            (blockquote :class "postMessage" ,textcontent)))

    (push (make-post "Hey fellow anons!") *posts*)
    (push (make-post "hello!" :username "Josh" :title "My salutation to everyone!.") *posts*)

    ;; pseudo web server response tool
    (define-response "/thread"
      (jhtml:jhtml
       `(html
         (head (title "some thread"))
         (body
          ,@ *posts*))))
  #+end_src
  Then you just add some posting functionality and handling of post requests and
  you've got yourself a working textboard. Pretty simple and modular.

* Why the `J'?
  Because it sounds nice.
